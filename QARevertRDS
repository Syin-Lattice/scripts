import boto3
import botocore
import os
from slackclient import SlackClient

REGION = 'us-east-1'
source2 = boto3.client('rds', region_name=REGION)
Group=['sg-9fbd7fe5']

def EnableRDS():
    print ('Enable RDS')
    RDS_parsed = source2.describe_db_instances()
    RDSinstances = RDS_parsed['DBInstances']
    
    print (len(RDSinstances))
    x=0
    rdsInstances=[]

    while(x<len(RDSinstances)):
                
        rdsInstance = (RDS_parsed['DBInstances'][x]['DBInstanceIdentifier'])
        if (rdsInstance == 'lpi-encrypted'):
            print ((RDS_parsed['DBInstances'][x]['VpcSecurityGroups']))
            print ((RDS_parsed['DBInstances'][x]['VpcSecurityGroups']))
            print (RDS_parsed['DBInstances'][x]['DBClusterIdentifier'])
            rdsCluster = (RDS_parsed['DBInstances'][x]['DBClusterIdentifier'])
            print (rdsCluster)
            try:
                    
                      response = source2.modify_db_cluster(DBClusterIdentifier=rdsCluster,VpcSecurityGroupIds=Group)
                      print (response)
                      TriggerAlter()

            except botocore.exceptions.ClientError as e:
                      raise Exception("Could create cache cluster: %s" % e)

        x=x+1
        
       
def TriggerAlert():
    slack_client = SlackClient('xoxp-3476656916-50579388403-388759496705-dbe71886b6d72fa0f634e74e55b5847e')
    slack_client.api_call(
                          "chat.postMessage",
                          channel="C1SSLBB9C",
                          text="The traffic of instance lpi-encrypted is reverted",
                          username='QARevertRDSAlert'
                          )
 
                            

if __name__ == '__main__':
   
    EnableRDS()
